var expressIO = require('express.io');

var app = expressIO();

// GAME PARAMETERS

// Paramètres système
var nextPlayerId = 1;
var serverRunning = false;
var etatJeu = 0; // 0 = entrainement; 1 = demarrage; 2 = partie en cours; 3 = redemarrage de la partie
var gameLaunchTotalTime = 7;
var gameLaunchTime = 0;

// Paramètres d'affichage
var fps = 60;

// Paramètres de l'arène
var arenaWidth = 800;
var arenaHeight = 600;

// Paramètres des joueurs
var playerSpeed = 2;
var playerHitboxSize = 12;
var playerInvincibilityTime = 3;

// Paramètres des murs
var wallSize = 2;

var playersInfos = {};
var wallsInfos = {};

// EXPRESS

app.use(expressIO.static(__dirname));
app.get('/', function(req, res) {
    res.sendfile(__dirname + '/resources/jeu.html');
});

// SOCKET.IO

app.http().io();

app.io.route('newPlayer', function(req) {
    var playerId = nextPlayerId;
    var playerName = req.data;
    // Insertion de l'ID du joueur dans la socket pour l'identifier lors de sa déconnexion
    req.socket.playerId = playerId;

    if(playerName == "") playerName = "Joueur"+playerId;
    else {
         if(nameTest(playerName)){
             var suffixe = 2;
             while(nameTest(playerName+suffixe)){
                 suffixe++;
             }
             playerName = playerName+suffixe;
         }
    }

    var playerAlive = true;
    if(etatJeu == 2) playerAlive = false;

    playersInfos[playerId] = {};
    playersInfos[playerId]["id"] = playerId;
    playersInfos[playerId]["idSocket"] = req.socket.id;
    playersInfos[playerId]["name"] = playerName;
    playersInfos[playerId]["position"] = {};
    playersInfos[playerId]["position"]["x"] = arenaWidth/2;
    playersInfos[playerId]["position"]["y"] = arenaHeight/2;
    playersInfos[playerId]["position"]["direction"] = Math.floor(Math.random()*4);
    playersInfos[playerId]["invincibility"] = playerInvincibilityTime*fps;
    playersInfos[playerId]["alive"] = playerAlive;
    if(etatJeu == 0) playersInfos[playerId]["score"] = -1;
    else playersInfos[playerId]["score"] = 0;
    wallsInfos[playerId] = [];

    nextPlayerId++;

    req.io.emit('init',
        {
            gameInfos: {
                fps: fps,
                arenaWidth: arenaWidth,
                arenaHeight: arenaHeight,
                wallSize: wallSize
            },
            playerId: playerId,
            playersInfos: playersInfos
        });

    console.log("Joueur \""+playerName+"\" connecté");
    req.io.broadcast('newPlayerConnected', {id: playersInfos[playerId]["id"], name: playersInfos[playerId]["name"], alive: playersInfos[playerId]["alive"]});
});

app.io.route('changeDirection', function(req) {
    if(playersInfos[req.data.playerId] != undefined && playersInfos[req.data.playerId].alive == true) {
        var ancienneDirection = playersInfos[req.data.playerId].position.direction;
        var nouvelleDirection = req.data.direction;
        if (nouvelleDirection != null && playersInfos[req.data.playerId] != null) {
            if (
                (ancienneDirection == 0 && nouvelleDirection != 2) ||
                (ancienneDirection == 1 && nouvelleDirection != 3) ||
                (ancienneDirection == 2 && nouvelleDirection != 0) ||
                (ancienneDirection == 3 && nouvelleDirection != 1)
            ) playersInfos[req.data.playerId].position.direction = nouvelleDirection;
        }
    }
});

app.io.route('disconnect', function(req) {
    var playerInfo = playersInfos[req.socket.playerId];
    if(playerInfo != null) {
        delete playersInfos[playerInfo.id];
        if(etatJeu == 0) delete wallsInfos[playerInfo.id];
        console.log("Joueur \""+playerInfo.name+"\" déconnecté");
        req.io.broadcast('disconnect', playerInfo.id);
    }
});

app.io.route('command', function(req) {
    if(req.data == "clearwalls") {
        console.log("Commande appelée : clearwalls ");
        for(var playerId in wallsInfos) wallsInfos[playerId] = [];
    }
    if(req.data == "resetscores") {
        console.log("Commande appelée : resetscores ");
        for (var playerId in playersInfos) {
            if (playersInfos[playerId].score > 0) {
                playersInfos[playerId].score = 0;
                app.io.broadcast('playerScore', {playerId: playerId, score: 0});
            }
        }
        etatJeu = 0;
    }
});

app.io.route('respawn', function(playerId) {
    if(!playersInfos[playerId.data].alive && etatJeu == 0) {
        playersInfos[playerId.data].alive = true;
        playersInfos[playerId.data].position.x = arenaWidth/2;
        playersInfos[playerId.data].position.y = arenaHeight/2;
        playersInfos[playerId.data].position.direction = Math.floor(Math.random()*4);
        playersInfos[playerId.data].invincibility = playerInvincibilityTime*fps;
        wallsInfos[playerId.data] = [];
        app.io.broadcast('playerRevived', [playerId.data]);
    }
});

var cycle = function() {
    runPlayers();
    // Entrainement
    if(etatJeu == 0) {
        if(getPlayerCount() > 1) {
            preparerPartie();
        }
    }

    // Préparation
    if(etatJeu == 1) {
        if(gameLaunchTime > 0) {
            if(gameLaunchTime % fps == 0 && gameLaunchTime/fps <= 3) {
                app.io.broadcast('announce', {text: "Début de la partie dans : "+(gameLaunchTime/fps)});
            }
            gameLaunchTime--;
        }
        else {
            demarrerPartie();
        }
    }

    // Partie en cours
    if(etatJeu == 2) {
        if(getPlayerAliveCount() < 2) {
            if(getPlayerAliveCount() == 1) {
                var winner = null;
                for(var player in playersInfos) {
                    if(playersInfos[player].alive) winner = player;
                }
                if(winner != null) {
                    var perdants = 0;
                    for(var player in playersInfos) {
                        if(player != winner && playersInfos[player].score != -1) perdants++;
                    }
                    if(perdants > 0) {
                        app.io.broadcast('announce', {text: playersInfos[winner].name+" remporte la manche"});
                        playersInfos[winner].score++;
                        app.io.broadcast('playerScore', {playerId: winner, score: playersInfos[winner].score});
                    }
                    else {
                        playersInfos[player].score = -1;
                        app.io.broadcast('playerScore', {playerId: winner, score: -1});
                        app.io.broadcast('announce', {text: "Fin de la partie"});
                    }
                }
                else {
                    app.io.broadcast('announce', {text: "Erreur lors du calcul du vainqueur"});
                }
            }
            if(getPlayerAliveCount() == 0) {
                app.io.broadcast('announce', {text: "Manche nulle : tous les joueur sont éliminés"});
            }
            etatJeu = 0;
        }
    }
};

var runPlayers = function() {

    // Modifier la position des joueurs

    for(var player in playersInfos) {
        if(playersInfos[player].alive == true) {
            switch (playersInfos[player].position.direction) {
                case 0:
                    playersInfos[player].position.y -= playerSpeed;
                    break;
                case 1:
                    playersInfos[player].position.x += playerSpeed;
                    break;
                case 2:
                    playersInfos[player].position.y += playerSpeed;
                    break;
                case 3:
                    playersInfos[player].position.x -= playerSpeed;
                    break;
            }

            // Ajouter/agrandir un mur

            if (playersInfos[player].invincibility == 0) {
                if (wallsInfos[player].length == 0) {
                    wallsInfos[player].push(
                        {
                            xStart: playersInfos[player].position.x,
                            yStart: playersInfos[player].position.y,
                            xEnd: playersInfos[player].position.x,
                            yEnd: playersInfos[player].position.y,
                            direction: playersInfos[player].position.direction
                        });
                }
                else if (wallsInfos[player][wallsInfos[player].length - 1].direction != playersInfos[player].position.direction) {
                    wallsInfos[player].push(
                        {
                            xStart: wallsInfos[player][wallsInfos[player].length - 1].xEnd,
                            yStart: wallsInfos[player][wallsInfos[player].length - 1].yEnd,
                            xEnd: playersInfos[player].position.x,
                            yEnd: playersInfos[player].position.y,
                            direction: playersInfos[player].position.direction
                        });
                }
                else {
                    wallsInfos[player][wallsInfos[player].length - 1].xEnd = playersInfos[player].position.x;
                    wallsInfos[player][wallsInfos[player].length - 1].yEnd = playersInfos[player].position.y;
                }
            }
        }
    }

    // Tester les colisions

    var playersDestroyed = colisionTest();

    for(var i in playersDestroyed) {
        playersInfos[playersDestroyed[i]].alive = false;
    }

    if(playersDestroyed.length > 0) app.io.broadcast('playerDestroyed', playersDestroyed);

    // Modifier la valeur d'invincibilité
    for(var player in playersInfos) {
        if(playersInfos[player].invincibility > 0) playersInfos[player].invincibility--;
    }

    app.io.broadcast('tick', {playersInfos: playersInfos, wallsInfos: wallsInfos});
};

var colisionTest = function() {
    var colision = [];
    for(var player1 in playersInfos) {
        if(playersInfos[player1].alive == true) {

            // Colision avec l'arène
            if (
                (playersInfos[player1].position.x < playerHitboxSize / 2) ||
                (playersInfos[player1].position.y < playerHitboxSize / 2) ||
                (playersInfos[player1].position.x > arenaWidth - (playerHitboxSize / 2)) ||
                (playersInfos[player1].position.y > arenaHeight - (playerHitboxSize / 2))
            ) {
                if (colision.indexOf(parseInt(player1, 10)) == -1) colision.push(playersInfos[player1].id);
            }

            if (playersInfos[player1].invincibility == 0) {

                // Colision entre joueur
                for (var player2 in playersInfos) {
                    if (player1 != player2 && playersInfos[player2].alive == true && !(
                            (playersInfos[player1].position.x >= playersInfos[player2].position.x + playerHitboxSize) || // Trop à droite
                            (playersInfos[player1].position.x + playerHitboxSize <= playersInfos[player2].position.x) || // Trop à gauche
                            (playersInfos[player1].position.y >= playersInfos[player2].position.y + playerHitboxSize) || // Trop en bas
                            (playersInfos[player1].position.y + playerHitboxSize <= playersInfos[player2].position.y) // Trop en haut
                        )) {
                        // Colision du player1
                        if (colision.indexOf(parseInt(player1, 10)) == -1) colision.push(playersInfos[player1].id);
                    }
                }

                // Colision avec un mur

                var bumper; // Hitbox gérant les colisions avec les murs afin d'éviter l'auto-colision avec son propre mur lors de sa génération
                switch (playersInfos[player1].position.direction) {
                    case 0: // Vers le haut
                        bumper = {
                            x: playersInfos[player1].position.x - (playerHitboxSize / 2),
                            y: playersInfos[player1].position.y - (playerHitboxSize / 2),
                            width: playerHitboxSize,
                            height: (playerHitboxSize / 2) - (wallSize / 2)
                        };
                        break;
                    case 1: // Vers la droite
                        bumper = {
                            x: playersInfos[player1].position.x + (wallSize / 2),
                            y: playersInfos[player1].position.y - (playerHitboxSize / 2),
                            width: (playerHitboxSize / 2) - (wallSize / 2),
                            height: playerHitboxSize
                        };
                        break;
                    case 2: // Vers le bas
                        bumper = {
                            x: playersInfos[player1].position.x - (playerHitboxSize / 2),
                            y: playersInfos[player1].position.y + (wallSize / 2),
                            width: playerHitboxSize,
                            height: (playerHitboxSize / 2) - (wallSize / 2)
                        };
                        break;
                    case 3: // Vers la gauche
                        bumper = {
                            x: playersInfos[player1].position.x - (playerHitboxSize / 2),
                            y: playersInfos[player1].position.y - (playerHitboxSize / 2),
                            width: (playerHitboxSize / 2) - (wallSize / 2),
                            height: playerHitboxSize
                        };
                        break;
                }

                for (var playerId in wallsInfos) {
                    for (var i = 0; i < wallsInfos[playerId].length; i++) {
                        var wall = boxWallInfos(wallsInfos[playerId][i]);
                        if (!(
                                (bumper.y + bumper.height <= wall.y) || // Trop en haut
                                (bumper.x >= wall.x + wall.width) || // Trop à droite
                                (bumper.y >= wall.y + wall.height) || // Trop en bas
                                (bumper.x + bumper.width <= wall.x) // Trop à gauche
                            )) {
                            if (colision.indexOf(parseInt(player1, 10)) == -1) colision.push(playersInfos[player1].id);
                        }
                    }
                }
            }
        }
    }
    return colision;
};

var boxWallInfos = function(wall) {
    switch(wall.direction) {
        case 0: // Vers le haut
            return {
                x:wall.xEnd - (wallSize/2),
                y:wall.yEnd - (wallSize/2),
                width: wallSize,
                height: wall.yStart - wall.yEnd + wallSize
            };
            break;
        case 1: // Vers la droite
            return {
                x:wall.xStart - (wallSize/2),
                y:wall.yStart - (wallSize/2),
                width: wall.xEnd - wall.xStart + wallSize,
                height: wallSize
            };
            break;
        case 2: // Vers le bas
            return {
                x:wall.xStart - (wallSize/2),
                y:wall.yStart - (wallSize/2),
                width: wallSize,
                height: wall.yEnd - wall.yStart + wallSize
            };
            break;
        case 3: // Vers la gauche
            return {
                x:wall.xEnd - (wallSize/2),
                y:wall.yEnd - (wallSize/2),
                width: wall.xStart - wall.xEnd + wallSize,
                height: wallSize
            };
            break;
    }
};

var nameTest = function(name) {
    var resultat = false;
    for(var player in playersInfos) {
        if(playersInfos[player]["name"] == name) resultat = true;
    }
    return resultat;
};

var getPlayerCount = function() {
    var count = 0;
    var i;
    for (i in playersInfos) {
        if(playersInfos.hasOwnProperty(i)) {
            count++;
        }
    }
    return count;
};

var getPlayerAliveCount = function() {
    var count = 0;
    for(var player in playersInfos) {
        if(playersInfos[player].alive) {
            count++;
        }
    }
    return count;
};

var preparerPartie = function() {
    etatJeu = 1;
    gameLaunchTime = gameLaunchTotalTime * fps;
};

var demarrerPartie = function() {
    etatJeu = 2;

    // Supprimer les murs
    for(var player in wallsInfos) {
        delete wallsInfos[player];
    }

    var playerList = [];

    for(var player in playersInfos) {
        playersInfos[player].alive = true;
        playersInfos[player]["position"]["x"] = arenaWidth/2;
        playersInfos[player]["position"]["y"] = arenaHeight/2;
        playersInfos[player]["position"]["direction"] = Math.floor(Math.random()*4);
        playersInfos[player]["invincibility"] = playerInvincibilityTime*fps;
        if(playersInfos[player].score == -1) {
            playersInfos[player].score = 0;
            app.io.broadcast('playerScore', {playerId: player, score: 0});
        }
        wallsInfos[player] = [];
        playerList.push(player);
    }

    app.io.broadcast('playerRevived', playerList);
};

// RUN
var run = function(port) {
    var runPort;
    if(port == null) runPort = 3000;
    else runPort = port;
    app.listen(runPort);
    setInterval(cycle, 1000/fps);
    console.log("Serveur de jeu TRON démarré (port "+runPort+")");
    serverRunning = true;
};

// PARAMETRAGE SERVEUR

var setFPS = function(newFPS) {
    if(!serverRunning) {
        if(newFPS!=null && (newFPS === parseInt(newFPS, 10))) {
            fps = newFPS;
        }
        else console.log("Argument invalide - setFPS(int)");
    }
    else console.log("Impossible de paramétrer le serveur lorsque celui-ci est déjà lancé - setFPS()");
};

var setArenaSize = function(newWidth, newHeight) {
    if(!serverRunning) {
        if(newWidth!=null && newHeight!=null && (newWidth === parseInt(newWidth, 10)) && (newHeight === parseInt(newHeight, 10))) {
            arenaWidth = newWidth;
            arenaHeight = newHeight;
        }
        else console.log("Arguments invalides - setArenaSize(int, int)");
    }
    else console.log("Impossible de paramétrer le serveur lorsque celui-ci est déjà lancé - setArenaSize()");
};

var setPlayerSpeed = function(newSpeed) {
    if(!serverRunning) {
        if(newSpeed!=null && (newSpeed === parseInt(newSpeed, 10))) {
            playerSpeed = newSpeed;
        }
        else console.log("Argument invalide - setPlayerSpeed(int)");
    }
    else console.log("Impossible de paramétrer le serveur lorsque celui-ci est déjà lancé - setPlayerSpeed()");
};

var setPlayerInvincibilityTime = function(newInvincibilityTime) {
    if(!serverRunning) {
        if(newInvincibilityTime!=null && (newInvincibilityTime === parseInt(newInvincibilityTime, 10))) {
            playerInvincibilityTime = newInvincibilityTime;
        }
        else console.log("Argument invalide - setPlayerInvincibilityTime(int)");
    }
    else console.log("Impossible de paramétrer le serveur lorsque celui-ci est déjà lancé - setPlayerInvincibilityTime()");
};

module.exports.run = run;
module.exports.setFPS = setFPS;
module.exports.setArenaSize = setArenaSize;
module.exports.setPlayerSpeed = setPlayerSpeed;
module.exports.setPlayerInvincibilityTime = setPlayerInvincibilityTime;