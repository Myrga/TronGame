var app = angular.module("Tron", [ 'ngRoute' ]);

app.config(['$routeProvider',
    function($routeProvider) {
        $routeProvider.
        when('/login', {
            templateUrl: 'login.html',
            controller: 'LoginController'
        }).
        when('/tron', {
            templateUrl: 'tron.html',
            controller: 'TronController',
            controllerAs: 'tronCtrl'
        }).
        otherwise({
            redirectTo: '/login'
        });
    }]
);

app.run(['$rootScope', '$location', '$route', function($rootScope, $location, $route) {
    $rootScope.keys = Object.keys;
    $rootScope.$on( "$routeChangeStart", function(event, next, current) {
        if ($rootScope.login == null) {
            $location.  path("/login");
        } else if(current && $route.current.templateUrl == "tron.html"){
            event.preventDefault();
        }
    });
}]);

app.controller("LoginController", function($scope, $rootScope, $location){

    $scope.playerColorHue = 180;
    $scope.ennemyColorHue = 0;

    $scope.logIn = function(){
        $rootScope.login = $scope.playerName;
        $rootScope.playerColor = surfacecurve.color('rgb(255,0,0)').hue($scope.playerColorHue).html();
        $rootScope.ennemyColor = surfacecurve.color('rgb(255,0,0)').hue($scope.ennemyColorHue).html();
        $location.path("/tron");
    };

    $scope.refreshColorPickers = function() {
        $scope.discStyle = {'-webkit-filter':'hue-rotate('+($scope.playerColorHue-180)+'deg)'};
        var defaultColor = surfacecurve.color('rgb(255,0,0)');
        $scope.playerColorStyle = {'background-color':defaultColor.hue($scope.playerColorHue).html()};
        $scope.ennemyColorStyle = {'background-color':defaultColor.hue($scope.ennemyColorHue).html()};
    };
});

app.controller("TronController", function($http, $scope, $rootScope){

    var ctrl = this;
    ctrl.io = io.connect();

    var dessin = document.getElementById('dessin');
    var context = dessin.getContext("2d");

    var gameInitialized = false;

    // Ressources
    var imageBike = new Image();
    imageBike.src = "resources/images/bike_empty.png";
    var imageShield = new Image();
    imageShield.src = "resources/images/shield.png";
    var audioNewPlayer = new Audio('resources/sons/newPlayerVoice.mp3');
    var audioPlayerDestroyed = new Audio('resources/sons/playerDestroyedVoice.mp3');

    // Paramètres d'affichage
    var afficherNomJoueurs = true;

    // Paramètres des annonces
    var announceShowTime = 4;
    var announceFadeTime = 1;
    var announceStack = 3;

    var gameInfos;
    ctrl.playersInfos = {};
    var announces = [];

    ctrl.io.emit('newPlayer', $rootScope.login);

    ctrl.io.on('init', function(data) {
        $scope.$apply(function(){
            // Enregistrement de l'ID du joueurs
            ctrl.playerId = data.playerId;
            // Enregistrement des informations des joueurs
            for(var player in data.playersInfos) {
                ctrl.playersInfos[player] = {
                    name: data.playersInfos[player].name,
                    alive: data.playersInfos[player].alive,
                    score: data.playersInfos[player].score
                };
            }
        });
        gameInfos = data.gameInfos;
        var styleWidth = 'width:'+gameInfos.arenaWidth+'px;';
        var styleHeight = 'height:'+gameInfos.arenaHeight+'px;';
        dessin.setAttribute('style', styleWidth+styleHeight);
        context.canvas.width  = gameInfos.arenaWidth;
        context.canvas.height = gameInfos.arenaHeight;
        gameInitialized = true;
    });

    ctrl.io.on('tick', function(infos) {

        if(gameInitialized) {
            var playersInfos = infos.playersInfos;
            var wallsInfos = infos.wallsInfos;

            context.clearRect(0, 0, dessin.width, dessin.height);

            // Afficher murs

            for (var playerId in wallsInfos) {
                // Choix couleur
                if (ctrl.playerId == playerId) context.fillStyle = $rootScope.playerColor;
                else context.fillStyle = $rootScope.ennemyColor;

                for (var wall in wallsInfos[playerId]) {
                    var wallInfos = wallsInfos[playerId][wall];

                    switch (wallInfos.direction) {
                        case 0: // Vers le haut
                            context.fillRect(
                                wallInfos.xEnd - (gameInfos.wallSize / 2),
                                wallInfos.yEnd - (gameInfos.wallSize / 2),
                                gameInfos.wallSize,
                                wallInfos.yStart - wallInfos.yEnd + gameInfos.wallSize
                            );
                            break;
                        case 1: // Vers la droite
                            context.fillRect(
                                wallInfos.xStart - (gameInfos.wallSize / 2),
                                wallInfos.yStart - (gameInfos.wallSize / 2),
                                wallInfos.xEnd - wallInfos.xStart + gameInfos.wallSize,
                                gameInfos.wallSize
                            );
                            break;
                        case 2: // Vers le bas
                            context.fillRect(
                                wallInfos.xStart - (gameInfos.wallSize / 2),
                                wallInfos.yStart - (gameInfos.wallSize / 2),
                                gameInfos.wallSize,
                                wallInfos.yEnd - wallInfos.yStart + gameInfos.wallSize
                            );
                            break;
                        case 3: // Vers la gauche
                            context.fillRect(
                                wallInfos.xEnd - (gameInfos.wallSize / 2),
                                wallInfos.yEnd - (gameInfos.wallSize / 2),
                                wallInfos.xStart - wallInfos.xEnd + gameInfos.wallSize,
                                gameInfos.wallSize
                            );
                            break;
                    }
                }
            }

            // Afficher joueurs

            for (var player in playersInfos) {
                if(playersInfos[player].alive == true) {
                    var x = playersInfos[player].position.x;
                    var y = playersInfos[player].position.y;
                    var direction = playersInfos[player].position.direction;

                    // Choix couleur

                    if (ctrl.playerId == playersInfos[player].id) context.fillStyle = $rootScope.playerColor;
                    else context.fillStyle = $rootScope.ennemyColor;


                    // Afficher moto

                    context.save();
                    context.translate(x, y);
                    switch (direction) {
                        case 1:
                            context.rotate(Math.PI * 0.5);
                            break;
                        case 2:
                            context.rotate(Math.PI * 1.0);
                            break;
                        case 3:
                            context.rotate(Math.PI * 1.5);
                            break;
                    }
                    context.fillRect(-3, -11, 6, 6);
                    context.fillRect(-3, 5, 6, 6);
                    context.fillRect(-2, -2, 4, 5);
                    context.drawImage(imageBike, -5, -11);

                    // Invincibilité
                    if (playersInfos[player].invincibility > 0) {
                        context.drawImage(imageShield, -12, -12);
                    }

                    context.restore();

                    // Afficher nom joueur (optionnel)


                    if (afficherNomJoueurs) {
                        context.font = "12px screen_matrix";
                        context.textAlign = "center";
                        context.fillStyle = "rgba(255, 255, 255, 1)";
                        context.fillText(playersInfos[player].name, playersInfos[player].position.x, playersInfos[player].position.y + imageBike.height);
                    }
                }
            }

            // Affichage annonces

            for (var i in announces) {
                var announce = announces[i];
                var announceTextSize = 12;
                context.font = announceTextSize+"px screen_matrix";
                context.textAlign = "left";
                if (announce.showFrames > 0) {
                    context.fillStyle = "rgba(255, 255, 255, 1)";
                    context.fillText(announce.text, 10, 10 + announceTextSize + (i * announceTextSize));
                    announce.showFrames--;
                }
                else if (announce.fadeFrames > 0) {
                    var opacity = announce.fadeFrames / (announceFadeTime * gameInfos.fps);
                    context.fillStyle = "rgba(255, 255, 255, " + opacity + ")";
                    context.fillText(announce.text, 10, 10 + announceTextSize + (i * announceTextSize));
                    announce.fadeFrames--;
                }
            }

            // Effacer les annonces terminées
            clearAnnounces();
        }
    });

    ctrl.io.on('announce', function(announce) {
        addAnnounce(announce.text);
    });

    ctrl.io.on('newPlayerConnected', function(newPlayer) {
        audioNewPlayer.play();
        $scope.$apply(function(){
            ctrl.playersInfos[newPlayer.id] = {name: newPlayer.name, alive: newPlayer.alive};
        });
        addAnnounce("\""+newPlayer.name+"\" à rejoint l'arène");
    });

    ctrl.io.on('disconnect', function(idPlayerDisconnected){
        $scope.$apply(function(){
            delete ctrl.playersInfos[idPlayerDisconnected];
        });
    });

    ctrl.io.on('playerDestroyed', function(playersDestroyed) {
        audioPlayerDestroyed.play();
        for(var i in playersDestroyed) {
            var idPlayer = playersDestroyed[i];
            addAnnounce("\""+ctrl.playersInfos[idPlayer].name+"\" détruit");
            $scope.$apply(function() {
                ctrl.playersInfos[idPlayer].alive = false;
            });
        }
    });

    ctrl.io.on('playerRevived', function(playersRevived) {
        for(var i in playersRevived) {
            var idPlayer = playersRevived[i];
            $scope.$apply(function() {
                ctrl.playersInfos[idPlayer].alive = true;
            });
        }
    });

    ctrl.io.on('playerScore', function(data) {
        $scope.$apply(function() {
            ctrl.playersInfos[data.playerId].score = data.score;
        });
    });

    var changeDirection = function(e) {
        if(e.keyCode<=40 && e.keyCode>=37) {
            var data = {};
            switch (e.keyCode) {
                case 38: // Haut
                    data["direction"] = 0;
                    break;
                case 39: // Droite
                    data["direction"] = 1;
                    break;
                case 40: // Bas
                    data["direction"] = 2;
                    break;
                case 37: // Gauche
                    data["direction"] = 3;
                    break;
            }
            data["playerId"] = ctrl.playerId;
            ctrl.io.emit('changeDirection', data);
        }
    };

    var addAnnounce = function(text) {
        var newAnnounce = {text: text, showFrames: announceShowTime*gameInfos.fps, fadeFrames: announceFadeTime*gameInfos.fps};
        if(announceStack <= 0 || announces.length<announceStack) announces.push(newAnnounce);
        else {
            for(var i=0; i<announceStack-1; i++) {
                announces[i] = announces[i+1];
            }
            announces[announceStack-1] = newAnnounce;
        }
    };

    var clearAnnounces = function() {
        for(var i=announces.length-1; i>=0; i--){
            if(announces[i].showFrames == 0 && announces[i].fadeFrames == 0) announces.splice(i, 1);
        }
    };

    var sendCommand = function(e) {
        if(e.keyCode == 67) {
            var command = prompt("Entrer une commande serveur :");
            if(command != null) {
                ctrl.io.emit('command', command);
            }
        }
    };

    var respawn = function(e) {
        if(e.keyCode == 82) {
            ctrl.io.emit('respawn', ctrl.playerId);
        }
    };

    addEventListener("keydown", changeDirection, true);
    addEventListener("keydown", sendCommand, true);
    addEventListener("keydown", respawn, true);

    if(window.DeviceMotionEvent != undefined) {
        window.ondevicemotion = function(event) {
            $scope.$apply(function() {
                var difference = 2;
                // Impulsion vers le bas du téléphone
                if(event.rotationRate.alpha >= difference) {
                    if(ctrl.land = window.orientation == 0)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 2}); // Aller vers le bas
                    else if(ctrl.land = window.orientation == 90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 1}); // Aller vers la droite
                    else if(ctrl.land = window.orientation == -90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 3}); // Aller vers la gauche
                }
                // Impulsion vers le haut du téléphone
                else if(event.rotationRate.alpha <= -difference) {
                    if(ctrl.land = window.orientation == 0)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 0}); // Aller vers le haut
                    else if(ctrl.land = window.orientation == 90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 3}); // Aller vers la gauche
                    else if(ctrl.land = window.orientation == -90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 1}); // Aller vers la droite
                }
                // Impulsion vers la droite du téléphone
                if(event.rotationRate.beta >= difference) {
                    if(ctrl.land = window.orientation == 0)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 1}); // Aller vers la droite
                    else if(ctrl.land = window.orientation == 90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 0}); // Aller vers le haut
                    else if(ctrl.land = window.orientation == -90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 2}); // Aller vers le bas
                }
                // Impulsion vers la gauche du téléphone
                else if(event.rotationRate.beta <= -difference) {
                    if(ctrl.land = window.orientation == 0)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 3}); // Aller vers la gauche
                    else if(ctrl.land = window.orientation == 90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 2}); // Aller vers le bas
                    else if(ctrl.land = window.orientation == -90)
                        ctrl.io.emit('changeDirection', {playerId: ctrl.playerId, direction: 0}); // Aller vers le haut
                }
            });
        }
    }
});

app.filter('orderObjectBy', function() {
    return function(items, field, reverse) {
        var filtered = [];
        angular.forEach(items, function(item) {
            filtered.push(item);
        });
        filtered.sort(function (a, b) {
            return (a[field] > b[field] ? 1 : -1);
        });
        if(reverse) filtered.reverse();
        return filtered;
    };
});